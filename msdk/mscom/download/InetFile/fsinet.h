
#pragma once

#include <windows.h>
#include <wininet.h>
#include <string>
#pragma comment(lib,"Wininet.lib")
#pragma comment(lib,"Ws2_32.lib")


#ifdef _UNICODE
	typedef  std::wstring fsString; 
#else 
	typedef std::string fsString;
#endif

enum fsInternetResult
{
	IR_SUCCESS,				
	IR_S_FALSE,				
	IR_ALREADYCONNECTED,	
	IR_WININETUNKERROR,		
	IR_NOTINITIALIZED,		
	IR_LOGINFAILURE,		
	IR_FILENOTOPENED,		
	IR_BADURL,				
	IR_INVALIDPARAM,		
	IR_ERROR,				
	IR_TIMEOUT,				
	IR_CANTCONNECT,			
	IR_FILENOTFOUND,		
	IR_LOSTCONNECTION,		
	IR_NAMENOTRESOLVED,		
	IR_RANGESNOTAVAIL,		
	IR_PROXYAUTHREQ,		
	IR_WINERROR,			
	IR_NEEDREDIRECT,		
	IR_EXTERROR,			
	IR_SERVERBADREQUEST,	
	IR_SERVERUNKERROR,		
	IR_CONNECTIONABORTED,	
	IR_OUTOFMEMORY,			
	IR_S_REDIRECTED,		
	IR_INVALIDPASSWORD,		
	IR_INVALIDUSERNAME,		
	IR_NODIRECTACCESS,		
	IR_NOINTERNETCONNECTION,	
	IR_HTTPVERNOTSUP,		
	IR_BADFILESIZE,
	
	IR_DOUBTFUL_RANGESRESPONSE,	
	
	IR_E_NOTIMPL,
	
	IR_E_WININET_UNSUPP_RESOURCE,
};

static fsInternetResult fsWinInetErrorToIR (DWORD dwErr)
{
	switch (dwErr)
	{
	case ERROR_SUCCESS:
		return IR_SUCCESS;

	case ERROR_INTERNET_LOGIN_FAILURE:
		return IR_LOGINFAILURE;

	case ERROR_INTERNET_INCORRECT_USER_NAME:
		return IR_INVALIDUSERNAME;

	case ERROR_INTERNET_INCORRECT_PASSWORD:
		return IR_INVALIDPASSWORD;

	case ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED:
		return IR_LOGINFAILURE;

	case ERROR_INTERNET_UNRECOGNIZED_SCHEME:
	case ERROR_INTERNET_INVALID_URL:
		return IR_BADURL;

	case ERROR_INTERNET_CANNOT_CONNECT:
		return IR_CANTCONNECT;

	case ERROR_INTERNET_CONNECTION_RESET:
		return IR_LOSTCONNECTION;

	case ERROR_INTERNET_TIMEOUT:
		return IR_TIMEOUT;

	case ERROR_INTERNET_NAME_NOT_RESOLVED:
		return IR_NAMENOTRESOLVED;

	case ERROR_INTERNET_EXTENDED_ERROR:
		return IR_EXTERROR;

	case ERROR_INTERNET_CONNECTION_ABORTED:
	case ERROR_INTERNET_OPERATION_CANCELLED:
	case ERROR_FTP_DROPPED:
		return IR_CONNECTIONABORTED;

	case ERROR_INTERNET_NO_DIRECT_ACCESS:
		return IR_NODIRECTACCESS;

	case ERROR_INTERNET_ITEM_NOT_FOUND:
		return IR_FILENOTFOUND;

	case ERROR_INTERNET_DISCONNECTED:
		return IR_NOINTERNETCONNECTION;

	case ERROR_INVALID_PARAMETER:
		return IR_INVALIDPARAM;

	case ERROR_HTTP_INVALID_SERVER_RESPONSE:
		return IR_SERVERUNKERROR;

	case ERROR_HTTP_INVALID_HEADER:
		return IR_E_WININET_UNSUPP_RESOURCE;

	default:

		return IR_WININETUNKERROR;
	}
}

static fsInternetResult fsWinInetErrorToIR ()
{
	return fsWinInetErrorToIR (GetLastError ());
}

static fsInternetResult fsHttpStatusCodeToIR (DWORD dwStatusCode)
{
	switch (dwStatusCode)
	{
	case HTTP_STATUS_BAD_REQUEST:
		return IR_SERVERBADREQUEST;

	case HTTP_STATUS_GONE:
	case HTTP_STATUS_NOT_FOUND:
		return IR_FILENOTFOUND;

	case HTTP_STATUS_PROXY_AUTH_REQ:
		return IR_PROXYAUTHREQ;

	case HTTP_STATUS_OK:
		return IR_SUCCESS;

	case HTTP_STATUS_DENIED:
	case HTTP_STATUS_FORBIDDEN:
		return IR_LOGINFAILURE;

	case HTTP_STATUS_REDIRECT:
	case HTTP_STATUS_REDIRECT_METHOD:
	case HTTP_STATUS_MOVED:
	case HTTP_STATUS_REDIRECT_KEEP_VERB:
		return IR_NEEDREDIRECT;

	case HTTP_STATUS_SERVICE_UNAVAIL:
	case HTTP_STATUS_SERVER_ERROR:
		return IR_SERVERUNKERROR;

	case HTTP_STATUS_VERSION_NOT_SUP:
		return IR_HTTPVERNOTSUP;

	default:

		return IR_WININETUNKERROR;
	}
}

static fsInternetResult fsWSAErrorToIR ()
{
	DWORD dwError = WSAGetLastError ();

	switch (dwError)
	{
	case NOERROR:
		return IR_SUCCESS;
	}

	return IR_ERROR;
}